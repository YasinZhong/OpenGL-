#include <GL/glut.h>
#include <stdio.h>
void myDisplay(void)
{
	glColor3f( 1,0,0);
	glClearColor(0,0,0,0);
	glClear(GL_COLOR_BUFFER_BIT);
	
	
	
	
	glEnable(GL_POLYGON_STIPPLE);	//开启多边形镂空状态，使用 glDisable(GL_POLYGON_STIPPLE) 关闭之
	
	static GLubyte Mask[128];
	FILE *fp;
	fp = fopen("my.bmp", "rb");
	if( fseek(fp, -(int)sizeof(Mask), SEEK_END) )
	exit(0); 
	if( !fread(Mask, sizeof(Mask), 1, fp) ) 
	exit(0);
	fclose(fp); 
	
	 glPolygonStipple( Mask ); //设置镂空的样式，参数是数组指针。 
	 glRectf(0,0,(float)32/256,(float)32/256);		//现在在 “右上角” 画一个矩形 ，试验一下。 
	 
	 
	 GLubyte myMask[128]=
	 {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
    0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
    0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
	0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,  
    0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,  
    0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30,  
    0x07, 0xE1, 0x87, 0xE0, 0x03, 0x3F, 0xFC, 0xC0,  
    0x03, 0x31, 0x8C, 0xC0, 0x03, 0x3F, 0xFC, 0xC0,  
    0x06, 0x64, 0x26, 0x60, 0x0C, 0xCC, 0x33, 0x30,  
    0x18, 0xCC, 0x33, 0x18, 0x10, 0xC4, 0x23, 0x08,  
    0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0C, 0x08,  
    0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08
    };
    glPolygonStipple( myMask ); //再次设置镂空的样式 
	glRectf(0,0,-(float)32/256,-(float)32/256);		//现在在 “左下角” 再画一个矩形 ，试验一下。
	 
	 
    glFlush();
}


int main(int argc,char *argv[])
{
	glutInit( &argc, argv);
	glutInitDisplayMode( GLUT_RGB | GLUT_SINGLE);

	glutInitWindowPosition( 1920/2-250,540-250);
	glutInitWindowSize(512,512);
	glutCreateWindow("OpenGL 程序");
	glutDisplayFunc(&myDisplay);

	glutMainLoop();
	return 0;
}




















/*
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
    0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
    0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
	0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,  
    0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,  
    0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30,  
    0x07, 0xE1, 0x87, 0xE0, 0x03, 0x3F, 0xFC, 0xC0,  
    0x03, 0x31, 0x8C, 0xC0, 0x03, 0x3F, 0xFC, 0xC0,  
    0x06, 0x64, 0x26, 0x60, 0x0C, 0xCC, 0x33, 0x30,  
    0x18, 0xCC, 0x33, 0x18, 0x10, 0xC4, 0x23, 0x08,  
    0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0C, 0x08,  
    0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08
*/

